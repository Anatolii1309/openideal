<?php

/**
 * @file
 *    Provides suggestions for tags to add to body of idea.
 *    Thanks to BrockBoland https://drupal.org/node/1966776 for giving me the starting point.
 */

/**
 * Implementation of hook_menu().
 */
function ideal_suggestions_menu() {
  $items = array();
  $items['admin/config/content/mentions/suggestions'] = array(
    'title' => 'Mentions suggestions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ideal_suggestions_admin'),
    'access arguments' => array('administer site configuration'),
    'description' => 'Allows administrators to adjust Mentions suggestions properties.',
    'file' => 'ideal_suggestions.admin.inc',
  );
  $items['suggestions/load'] = array(
    'title' => 'Load suggestions',
    'page callback' => '_suggestions_autocomplete',
    'access arguments' => array('use mentions suggestions'),
    'description' => 'Gets the HTML for use in the floating tag suggestion dialog.',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_permission().
 */
function ideal_suggestions_permission() {
  return array(
    'use mentions suggestions' => array(
      'title' => t('Use suggestions'),
    ),
  );
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function ideal_suggestions_form_alter(&$form, &$form_state, $form_id) {
  if (!user_access('use mentions suggestions')) {
    return;
  }
  if ($form_id == 'idea_node_form' || $form_id == 'comment_node_idea_form') {
    $path = drupal_get_path('module', 'ideal_suggestions');
    drupal_add_js($path . '/js/jquery.caretposition.js');
    drupal_add_js($path . '/js/jquery.sew.min.js');
    drupal_add_js($path . '/js/ideal_suggestions.js');
    drupal_add_css($path . '/ideal_suggestions.css');
  }
}

/*
* Find a suggestion for keyword
*/
function suggestions_get_suggestions($type, $part, $count) {
    if ($type == 'term') {
      $t = _suggestions_get_suggestions($type, $part, $count, FALSE);
    }
    else {
      $t = _suggestions_get_all_user_suggestions($part, $count);
    }
  return $t;
}

//get all term references
function _suggestions_get_suggestions($type, $part, $count, $own, $exclude = array()) {
  $query = db_select('taxonomy_term_data', 't')->fields('t', array('tid', 'name'));
  $query->addExpression('COUNT(t.tid)', 'count');
  $query->condition('t.name', '#'.db_like($part) . '%', 'LIKE');

  $result = $query->groupBy('t.tid')
      ->orderBy('t.name', 'ASC')
      ->range(0, $count)
      ->execute()
      ->fetchAll();
  $suggestions = array();
  foreach ($result as $obj) {
    $name = str_replace('#', '', $obj->name);
    $suggestions[] = (object) array(
          'type' => $type,
          'id' => $obj->tid,
          'name' => $name,
          'realname' => $name,
    );
  }
  return $suggestions;
}

// get all user references
function _suggestions_get_all_user_suggestions($part, $count, $exclude = array()) {
  $query = db_select('users')
      ->fields('users', array('uid', 'name'))
      ->where('LOWER(name) LIKE LOWER(:username)', array(':username' => db_like($part) . '%'));
  $query->addExpression("'user'", 'type');
  if ($exclude) {
    $ids = array();
    foreach ($exclude as $item) {
      if ($item->type == 'user') {
        $ids[] = $item->id;
      }
    }
    if ($ids) {
      $query->condition('uid', $ids, 'NOT IN');
    }
  }
  $result = $query->orderBy('name')
      ->range(0, $count)
      ->execute()
      ->fetchAll();
  $s = array();
  foreach ($result as $account) {
    $s[] = $account;
  }
  return $s;
}

/**
 * Helper function to autocomplete tags.
 */
function _suggestions_autocomplete() {
  $part = isset($_GET['text']) ? $_GET['text'] : null;
  $prefix = isset($_GET['token']) && !empty($_GET['token']) ? $_GET['token'] : '#';
  if ($part) {
    $type = $prefix == '#' ? 'term' : 'user';
    $suggestions = suggestions_get_suggestions($type, $part, variable_get('suggestions_count', 5));
    $items = array();
    foreach ($suggestions as $item) {
      if (module_exists('realname')) {
        $items[] = array('val' => check_plain($item->name), 'meta' => check_plain($item->realname));
      }
      else {
        $items[] = array('val' => check_plain($item->name), 'meta' => check_plain($item->name) );
      }
    }
    die(json_encode($items));
  }
}

/**
 * Implements hook_token_info().
 */
function ideal_suggestions_token_info() {
  $type = array(
    'name' => t('Mentions'),
    'description' => t('Tokens related to individual mentions.'),
    'needs-data' => 'mentions',
  );

  // Core tokens for mentions.
  $mentions['node'] = array(
    'name' => t('Mentioned on Node'),
    'description' => t('Node where is the mention.'),
  );

  // Core tokens for mentions.
  $mentions['node_url'] = array(
    'name' => t('Mentioned on Node URL'),
    'description' => t('Node where is the mention URL.'),
  );

  // Chained tokens for nodes.
  $mentions['user_email'] = array(
    'name' => t('User email'),
    'description' => t('The mentioned user email.'),
    'type' => 'user',
  );

  return array(
    'types' => array($type),
    'tokens' => array($mentions),
  );
}

/**
 * Implements hook_tokens().
 */
function ideal_suggestions_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $url_options = array('absolute' => TRUE);

  $sanitize = !empty($options['sanitize']);

  $replacements = array();

  if ($type == 'mentions' && !empty($data['mentions'])) {
    $mention = $data['mentions'];
    $mention_row = mentions_load($mention->mid);
    $node = node_load($mention_row->entity_id);
    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Simple key values on the metnion.
        case 'node':
          $replacements[$original] = !empty($node) && is_object($node) ? (string)$node->title : '';
          break;

        case 'node_url':
          $replacements[$original] = !empty($node) && is_object($node) ? (string)url('node/' . $node->nid, $url_options) : '';
          break;

        // Default values for the chained tokens handled below.
        case 'user_email':
          $user = !empty($mention) && is_object($mention) ? user_load($mention->user) : null;
          $mail = !empty($user) && is_object($user) ? $user->mail : '';
          $replacements[$original] = !empty($mail) ? $mail : '';
          break;
        
      }
    }
  }


  return $replacements;
}